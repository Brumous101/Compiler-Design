//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Brumo\Documents\repos\Compiler-Design\Labs\Lab4\Compiler\bin\debug\netcoreapp3.1\ssupl.txt by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class ssuplParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SEMI=1, WHILE=2, LP=3, RP=4, IF=5, ELSE=6, RETURN=7, LBR=8, RBR=9, NUM=10;
	public const int
		RULE_start = 0, RULE_program = 1, RULE_braceblock = 2, RULE_stmts = 3, 
		RULE_stmt = 4, RULE_cond = 5, RULE_expr = 6, RULE_factor = 7, RULE_returnStmt = 8, 
		RULE_loop = 9;
	public static readonly string[] ruleNames = {
		"start", "program", "braceblock", "stmts", "stmt", "cond", "expr", "factor", 
		"returnStmt", "loop"
	};

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "SEMI", "WHILE", "LP", "RP", "IF", "ELSE", "RETURN", "LBR", "RBR", 
		"NUM"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ssupl.txt"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ssuplParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ssuplParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ssuplParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProgramContext program() {
			return GetRuleContext<ProgramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ssuplParser.Eof, 0); }
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20;
			program();
			State = 21;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BraceblockContext braceblock() {
			return GetRuleContext<BraceblockContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 2, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 23;
			braceblock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BraceblockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBR() { return GetToken(ssuplParser.LBR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBR() { return GetToken(ssuplParser.RBR, 0); }
		public BraceblockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_braceblock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.EnterBraceblock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.ExitBraceblock(this);
		}
	}

	[RuleVersion(0)]
	public BraceblockContext braceblock() {
		BraceblockContext _localctx = new BraceblockContext(Context, State);
		EnterRule(_localctx, 4, RULE_braceblock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25;
			Match(LBR);
			State = 26;
			stmts();
			State = 27;
			Match(RBR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		public StmtsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmts; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.EnterStmts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.ExitStmts(this);
		}
	}

	[RuleVersion(0)]
	public StmtsContext stmts() {
		StmtsContext _localctx = new StmtsContext(Context, State);
		EnterRule(_localctx, 6, RULE_stmts);
		try {
			State = 33;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHILE:
			case IF:
			case RETURN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 29;
				stmt();
				State = 30;
				stmts();
				}
				break;
			case RBR:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CondContext cond() {
			return GetRuleContext<CondContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(ssuplParser.SEMI, 0); }
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.EnterStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.ExitStmt(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_stmt);
		try {
			State = 40;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 35;
				cond();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 36;
				loop();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 37;
				returnStmt();
				State = 38;
				Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondContext : ParserRuleContext {
		public CondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cond; } }
	 
		public CondContext() { }
		public virtual void CopyFrom(CondContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CondElseContext : CondContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(ssuplParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(ssuplParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(ssuplParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BraceblockContext[] braceblock() {
			return GetRuleContexts<BraceblockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BraceblockContext braceblock(int i) {
			return GetRuleContext<BraceblockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(ssuplParser.ELSE, 0); }
		public CondElseContext(CondContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.EnterCondElse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.ExitCondElse(this);
		}
	}
	public partial class CondNoElseContext : CondContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(ssuplParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(ssuplParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(ssuplParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BraceblockContext braceblock() {
			return GetRuleContext<BraceblockContext>(0);
		}
		public CondNoElseContext(CondContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.EnterCondNoElse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.ExitCondNoElse(this);
		}
	}

	[RuleVersion(0)]
	public CondContext cond() {
		CondContext _localctx = new CondContext(Context, State);
		EnterRule(_localctx, 10, RULE_cond);
		try {
			State = 56;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				_localctx = new CondNoElseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 42;
				Match(IF);
				State = 43;
				Match(LP);
				State = 44;
				expr();
				State = 45;
				Match(RP);
				State = 46;
				braceblock();
				}
				break;
			case 2:
				_localctx = new CondElseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 48;
				Match(IF);
				State = 49;
				Match(LP);
				State = 50;
				expr();
				State = 51;
				Match(RP);
				State = 52;
				braceblock();
				State = 53;
				Match(ELSE);
				State = 54;
				braceblock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 12, RULE_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			factor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(ssuplParser.NUM, 0); }
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 14, RULE_factor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			Match(NUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(ssuplParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(Context, State);
		EnterRule(_localctx, 16, RULE_returnStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			Match(RETURN);
			State = 63;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(ssuplParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(ssuplParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(ssuplParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BraceblockContext braceblock() {
			return GetRuleContext<BraceblockContext>(0);
		}
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.EnterLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.ExitLoop(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(Context, State);
		EnterRule(_localctx, 18, RULE_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			Match(WHILE);
			State = 66;
			Match(LP);
			State = 67;
			expr();
			State = 68;
			Match(RP);
			State = 69;
			braceblock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\f', 'J', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', 
		'\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', '\x4', 
		'\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '$', '\n', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', '+', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', 
		'\a', ';', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x2', '\x2', 
		'\f', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x2', '\x2', '\x2', '\x43', '\x2', '\x16', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '\x19', '\x3', '\x2', '\x2', '\x2', '\x6', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\b', '#', '\x3', '\x2', '\x2', '\x2', '\n', '*', '\x3', 
		'\x2', '\x2', '\x2', '\f', ':', '\x3', '\x2', '\x2', '\x2', '\xE', '<', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '>', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'@', '\x3', '\x2', '\x2', '\x2', '\x14', '\x43', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\x17', '\x5', '\x4', '\x3', '\x2', '\x17', '\x18', '\a', 
		'\x2', '\x2', '\x3', '\x18', '\x3', '\x3', '\x2', '\x2', '\x2', '\x19', 
		'\x1A', '\x5', '\x6', '\x4', '\x2', '\x1A', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\x1B', '\x1C', '\a', '\n', '\x2', '\x2', '\x1C', '\x1D', '\x5', 
		'\b', '\x5', '\x2', '\x1D', '\x1E', '\a', '\v', '\x2', '\x2', '\x1E', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\x5', '\n', '\x6', '\x2', 
		' ', '!', '\x5', '\b', '\x5', '\x2', '!', '$', '\x3', '\x2', '\x2', '\x2', 
		'\"', '$', '\x3', '\x2', '\x2', '\x2', '#', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '#', '\"', '\x3', '\x2', '\x2', '\x2', '$', '\t', '\x3', '\x2', 
		'\x2', '\x2', '%', '+', '\x5', '\f', '\a', '\x2', '&', '+', '\x5', '\x14', 
		'\v', '\x2', '\'', '(', '\x5', '\x12', '\n', '\x2', '(', ')', '\a', '\x3', 
		'\x2', '\x2', ')', '+', '\x3', '\x2', '\x2', '\x2', '*', '%', '\x3', '\x2', 
		'\x2', '\x2', '*', '&', '\x3', '\x2', '\x2', '\x2', '*', '\'', '\x3', 
		'\x2', '\x2', '\x2', '+', '\v', '\x3', '\x2', '\x2', '\x2', ',', '-', 
		'\a', '\a', '\x2', '\x2', '-', '.', '\a', '\x5', '\x2', '\x2', '.', '/', 
		'\x5', '\xE', '\b', '\x2', '/', '\x30', '\a', '\x6', '\x2', '\x2', '\x30', 
		'\x31', '\x5', '\x6', '\x4', '\x2', '\x31', ';', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\x33', '\a', '\a', '\x2', '\x2', '\x33', '\x34', '\a', 
		'\x5', '\x2', '\x2', '\x34', '\x35', '\x5', '\xE', '\b', '\x2', '\x35', 
		'\x36', '\a', '\x6', '\x2', '\x2', '\x36', '\x37', '\x5', '\x6', '\x4', 
		'\x2', '\x37', '\x38', '\a', '\b', '\x2', '\x2', '\x38', '\x39', '\x5', 
		'\x6', '\x4', '\x2', '\x39', ';', '\x3', '\x2', '\x2', '\x2', ':', ',', 
		'\x3', '\x2', '\x2', '\x2', ':', '\x32', '\x3', '\x2', '\x2', '\x2', ';', 
		'\r', '\x3', '\x2', '\x2', '\x2', '<', '=', '\x5', '\x10', '\t', '\x2', 
		'=', '\xF', '\x3', '\x2', '\x2', '\x2', '>', '?', '\a', '\f', '\x2', '\x2', 
		'?', '\x11', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\a', '\t', '\x2', 
		'\x2', '\x41', '\x42', '\x5', '\xE', '\b', '\x2', '\x42', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '\x44', '\a', '\x4', '\x2', '\x2', '\x44', 
		'\x45', '\a', '\x5', '\x2', '\x2', '\x45', '\x46', '\x5', '\xE', '\b', 
		'\x2', '\x46', 'G', '\a', '\x6', '\x2', '\x2', 'G', 'H', '\x5', '\x6', 
		'\x4', '\x2', 'H', '\x15', '\x3', '\x2', '\x2', '\x2', '\x5', '#', '*', 
		':',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
