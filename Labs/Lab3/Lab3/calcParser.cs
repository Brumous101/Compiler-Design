//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Brumo\Documents\repos\Compiler-Design\Labs\Lab3\Lab3\\calc.txt by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class calcParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NUM=1, ADDOP=2, MULOP=3, POWOP=4, LP=5, RP=6;
	public const int
		RULE_start = 0, RULE_sum = 1, RULE_product = 2, RULE_negate = 3, RULE_power = 4, 
		RULE_factor = 5, RULE_parens = 6;
	public static readonly string[] ruleNames = {
		"start", "sum", "product", "negate", "power", "factor", "parens"
	};

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "NUM", "ADDOP", "MULOP", "POWOP", "LP", "RP"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "calc.txt"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static calcParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public calcParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public calcParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(calcParser.Eof, 0); }
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcalcListener typedListener = listener as IcalcListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcalcListener typedListener = listener as IcalcListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14;
			sum(0);
			State = 15;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SumContext : ParserRuleContext {
		public SumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sum; } }
	 
		public SumContext() { }
		public virtual void CopyFrom(SumContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SumPlusProductContext : SumContext {
		[System.Diagnostics.DebuggerNonUserCode] public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADDOP() { return GetToken(calcParser.ADDOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProductContext product() {
			return GetRuleContext<ProductContext>(0);
		}
		public SumPlusProductContext(SumContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcalcListener typedListener = listener as IcalcListener;
			if (typedListener != null) typedListener.EnterSumPlusProduct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcalcListener typedListener = listener as IcalcListener;
			if (typedListener != null) typedListener.ExitSumPlusProduct(this);
		}
	}
	public partial class SumToProductContext : SumContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProductContext product() {
			return GetRuleContext<ProductContext>(0);
		}
		public SumToProductContext(SumContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcalcListener typedListener = listener as IcalcListener;
			if (typedListener != null) typedListener.EnterSumToProduct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcalcListener typedListener = listener as IcalcListener;
			if (typedListener != null) typedListener.ExitSumToProduct(this);
		}
	}

	[RuleVersion(0)]
	public SumContext sum() {
		return sum(0);
	}

	private SumContext sum(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SumContext _localctx = new SumContext(Context, _parentState);
		SumContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_sum, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new SumToProductContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 18;
			product(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 25;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SumPlusProductContext(new SumContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_sum);
					State = 20;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 21;
					Match(ADDOP);
					State = 22;
					product(0);
					}
					} 
				}
				State = 27;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ProductContext : ParserRuleContext {
		public ProductContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_product; } }
	 
		public ProductContext() { }
		public virtual void CopyFrom(ProductContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ProductMultiplyNegateContext : ProductContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProductContext product() {
			return GetRuleContext<ProductContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULOP() { return GetToken(calcParser.MULOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NegateContext negate() {
			return GetRuleContext<NegateContext>(0);
		}
		public ProductMultiplyNegateContext(ProductContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcalcListener typedListener = listener as IcalcListener;
			if (typedListener != null) typedListener.EnterProductMultiplyNegate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcalcListener typedListener = listener as IcalcListener;
			if (typedListener != null) typedListener.ExitProductMultiplyNegate(this);
		}
	}
	public partial class ProductToNegateContext : ProductContext {
		[System.Diagnostics.DebuggerNonUserCode] public NegateContext negate() {
			return GetRuleContext<NegateContext>(0);
		}
		public ProductToNegateContext(ProductContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcalcListener typedListener = listener as IcalcListener;
			if (typedListener != null) typedListener.EnterProductToNegate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcalcListener typedListener = listener as IcalcListener;
			if (typedListener != null) typedListener.ExitProductToNegate(this);
		}
	}

	[RuleVersion(0)]
	public ProductContext product() {
		return product(0);
	}

	private ProductContext product(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ProductContext _localctx = new ProductContext(Context, _parentState);
		ProductContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_product, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ProductToNegateContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 29;
			negate();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 36;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ProductMultiplyNegateContext(new ProductContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_product);
					State = 31;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 32;
					Match(MULOP);
					State = 33;
					negate();
					}
					} 
				}
				State = 38;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NegateContext : ParserRuleContext {
		public NegateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_negate; } }
	 
		public NegateContext() { }
		public virtual void CopyFrom(NegateContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NegateToPowerContext : NegateContext {
		[System.Diagnostics.DebuggerNonUserCode] public PowerContext power() {
			return GetRuleContext<PowerContext>(0);
		}
		public NegateToPowerContext(NegateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcalcListener typedListener = listener as IcalcListener;
			if (typedListener != null) typedListener.EnterNegateToPower(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcalcListener typedListener = listener as IcalcListener;
			if (typedListener != null) typedListener.ExitNegateToPower(this);
		}
	}
	public partial class AddopNegateContext : NegateContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADDOP() { return GetToken(calcParser.ADDOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NegateContext negate() {
			return GetRuleContext<NegateContext>(0);
		}
		public AddopNegateContext(NegateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcalcListener typedListener = listener as IcalcListener;
			if (typedListener != null) typedListener.EnterAddopNegate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcalcListener typedListener = listener as IcalcListener;
			if (typedListener != null) typedListener.ExitAddopNegate(this);
		}
	}

	[RuleVersion(0)]
	public NegateContext negate() {
		NegateContext _localctx = new NegateContext(Context, State);
		EnterRule(_localctx, 6, RULE_negate);
		try {
			State = 42;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADDOP:
				_localctx = new AddopNegateContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 39;
				Match(ADDOP);
				State = 40;
				negate();
				}
				break;
			case NUM:
			case LP:
				_localctx = new NegateToPowerContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 41;
				power();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PowerContext : ParserRuleContext {
		public PowerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_power; } }
	 
		public PowerContext() { }
		public virtual void CopyFrom(PowerContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FactorPowopNegateContext : PowerContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWOP() { return GetToken(calcParser.POWOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NegateContext negate() {
			return GetRuleContext<NegateContext>(0);
		}
		public FactorPowopNegateContext(PowerContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcalcListener typedListener = listener as IcalcListener;
			if (typedListener != null) typedListener.EnterFactorPowopNegate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcalcListener typedListener = listener as IcalcListener;
			if (typedListener != null) typedListener.ExitFactorPowopNegate(this);
		}
	}
	public partial class PowerToFactorContext : PowerContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public PowerToFactorContext(PowerContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcalcListener typedListener = listener as IcalcListener;
			if (typedListener != null) typedListener.EnterPowerToFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcalcListener typedListener = listener as IcalcListener;
			if (typedListener != null) typedListener.ExitPowerToFactor(this);
		}
	}

	[RuleVersion(0)]
	public PowerContext power() {
		PowerContext _localctx = new PowerContext(Context, State);
		EnterRule(_localctx, 8, RULE_power);
		try {
			State = 49;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				_localctx = new FactorPowopNegateContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 44;
				factor();
				State = 45;
				Match(POWOP);
				State = 46;
				negate();
				}
				break;
			case 2:
				_localctx = new PowerToFactorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 48;
				factor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
	 
		public FactorContext() { }
		public virtual void CopyFrom(FactorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FactorToParensContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParensContext parens() {
			return GetRuleContext<ParensContext>(0);
		}
		public FactorToParensContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcalcListener typedListener = listener as IcalcListener;
			if (typedListener != null) typedListener.EnterFactorToParens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcalcListener typedListener = listener as IcalcListener;
			if (typedListener != null) typedListener.ExitFactorToParens(this);
		}
	}
	public partial class FactorToNumContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(calcParser.NUM, 0); }
		public FactorToNumContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcalcListener typedListener = listener as IcalcListener;
			if (typedListener != null) typedListener.EnterFactorToNum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcalcListener typedListener = listener as IcalcListener;
			if (typedListener != null) typedListener.ExitFactorToNum(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 10, RULE_factor);
		try {
			State = 53;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUM:
				_localctx = new FactorToNumContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 51;
				Match(NUM);
				}
				break;
			case LP:
				_localctx = new FactorToParensContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 52;
				parens();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParensContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(calcParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(calcParser.RP, 0); }
		public ParensContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parens; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcalcListener typedListener = listener as IcalcListener;
			if (typedListener != null) typedListener.EnterParens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcalcListener typedListener = listener as IcalcListener;
			if (typedListener != null) typedListener.ExitParens(this);
		}
	}

	[RuleVersion(0)]
	public ParensContext parens() {
		ParensContext _localctx = new ParensContext(Context, State);
		EnterRule(_localctx, 12, RULE_parens);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			Match(LP);
			State = 56;
			sum(0);
			State = 57;
			Match(RP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return sum_sempred((SumContext)_localctx, predIndex);
		case 2: return product_sempred((ProductContext)_localctx, predIndex);
		}
		return true;
	}
	private bool sum_sempred(SumContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool product_sempred(ProductContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\b', '>', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', 
		'\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\x1A', 
		'\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x1D', '\v', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\a', '\x4', '%', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '(', '\v', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '-', '\n', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x5', '\x6', '\x34', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x5', '\a', 
		'\x38', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x2', '\x4', '\x4', '\x6', '\t', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x2', '\x2', '\x2', ';', '\x2', '\x10', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\x13', '\x3', '\x2', '\x2', '\x2', '\x6', '\x1E', 
		'\x3', '\x2', '\x2', '\x2', '\b', ',', '\x3', '\x2', '\x2', '\x2', '\n', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\f', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\xE', '\x39', '\x3', '\x2', '\x2', '\x2', '\x10', '\x11', '\x5', 
		'\x4', '\x3', '\x2', '\x11', '\x12', '\a', '\x2', '\x2', '\x3', '\x12', 
		'\x3', '\x3', '\x2', '\x2', '\x2', '\x13', '\x14', '\b', '\x3', '\x1', 
		'\x2', '\x14', '\x15', '\x5', '\x6', '\x4', '\x2', '\x15', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\x17', '\f', '\x4', '\x2', '\x2', '\x17', 
		'\x18', '\a', '\x4', '\x2', '\x2', '\x18', '\x1A', '\x5', '\x6', '\x4', 
		'\x2', '\x19', '\x16', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x1B', '\x19', '\x3', '\x2', '\x2', '\x2', '\x1B', 
		'\x1C', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\x1D', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', '\b', 
		'\x4', '\x1', '\x2', '\x1F', ' ', '\x5', '\b', '\x5', '\x2', ' ', '&', 
		'\x3', '\x2', '\x2', '\x2', '!', '\"', '\f', '\x4', '\x2', '\x2', '\"', 
		'#', '\a', '\x5', '\x2', '\x2', '#', '%', '\x5', '\b', '\x5', '\x2', '$', 
		'!', '\x3', '\x2', '\x2', '\x2', '%', '(', '\x3', '\x2', '\x2', '\x2', 
		'&', '$', '\x3', '\x2', '\x2', '\x2', '&', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\'', '\a', '\x3', '\x2', '\x2', '\x2', '(', '&', '\x3', '\x2', 
		'\x2', '\x2', ')', '*', '\a', '\x4', '\x2', '\x2', '*', '-', '\x5', '\b', 
		'\x5', '\x2', '+', '-', '\x5', '\n', '\x6', '\x2', ',', ')', '\x3', '\x2', 
		'\x2', '\x2', ',', '+', '\x3', '\x2', '\x2', '\x2', '-', '\t', '\x3', 
		'\x2', '\x2', '\x2', '.', '/', '\x5', '\f', '\a', '\x2', '/', '\x30', 
		'\a', '\x6', '\x2', '\x2', '\x30', '\x31', '\x5', '\b', '\x5', '\x2', 
		'\x31', '\x34', '\x3', '\x2', '\x2', '\x2', '\x32', '\x34', '\x5', '\f', 
		'\a', '\x2', '\x33', '.', '\x3', '\x2', '\x2', '\x2', '\x33', '\x32', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\v', '\x3', '\x2', '\x2', '\x2', 
		'\x35', '\x38', '\a', '\x3', '\x2', '\x2', '\x36', '\x38', '\x5', '\xE', 
		'\b', '\x2', '\x37', '\x35', '\x3', '\x2', '\x2', '\x2', '\x37', '\x36', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\r', '\x3', '\x2', '\x2', '\x2', 
		'\x39', ':', '\a', '\a', '\x2', '\x2', ':', ';', '\x5', '\x4', '\x3', 
		'\x2', ';', '<', '\a', '\b', '\x2', '\x2', '<', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\a', '\x1B', '&', ',', '\x33', '\x37',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
