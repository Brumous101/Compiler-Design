//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Brumo\Documents\repos\Compiler-Design\Labs\Lab3\Lab3\\calc.txt by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IcalcListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class calcBaseListener : IcalcListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="calcParser.start"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStart([NotNull] calcParser.StartContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="calcParser.start"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStart([NotNull] calcParser.StartContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>sumPlusProduct</c>
	/// labeled alternative in <see cref="calcParser.sum"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSumPlusProduct([NotNull] calcParser.SumPlusProductContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>sumPlusProduct</c>
	/// labeled alternative in <see cref="calcParser.sum"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSumPlusProduct([NotNull] calcParser.SumPlusProductContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>sumToProduct</c>
	/// labeled alternative in <see cref="calcParser.sum"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSumToProduct([NotNull] calcParser.SumToProductContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>sumToProduct</c>
	/// labeled alternative in <see cref="calcParser.sum"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSumToProduct([NotNull] calcParser.SumToProductContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>productMultiplyNegate</c>
	/// labeled alternative in <see cref="calcParser.product"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProductMultiplyNegate([NotNull] calcParser.ProductMultiplyNegateContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>productMultiplyNegate</c>
	/// labeled alternative in <see cref="calcParser.product"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProductMultiplyNegate([NotNull] calcParser.ProductMultiplyNegateContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>productToNegate</c>
	/// labeled alternative in <see cref="calcParser.product"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProductToNegate([NotNull] calcParser.ProductToNegateContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>productToNegate</c>
	/// labeled alternative in <see cref="calcParser.product"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProductToNegate([NotNull] calcParser.ProductToNegateContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>addopNegate</c>
	/// labeled alternative in <see cref="calcParser.negate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAddopNegate([NotNull] calcParser.AddopNegateContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>addopNegate</c>
	/// labeled alternative in <see cref="calcParser.negate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAddopNegate([NotNull] calcParser.AddopNegateContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>negateToPower</c>
	/// labeled alternative in <see cref="calcParser.negate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNegateToPower([NotNull] calcParser.NegateToPowerContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>negateToPower</c>
	/// labeled alternative in <see cref="calcParser.negate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNegateToPower([NotNull] calcParser.NegateToPowerContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>factorPowopNegate</c>
	/// labeled alternative in <see cref="calcParser.power"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFactorPowopNegate([NotNull] calcParser.FactorPowopNegateContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>factorPowopNegate</c>
	/// labeled alternative in <see cref="calcParser.power"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFactorPowopNegate([NotNull] calcParser.FactorPowopNegateContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>powerToFactor</c>
	/// labeled alternative in <see cref="calcParser.power"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPowerToFactor([NotNull] calcParser.PowerToFactorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>powerToFactor</c>
	/// labeled alternative in <see cref="calcParser.power"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPowerToFactor([NotNull] calcParser.PowerToFactorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>factorToNum</c>
	/// labeled alternative in <see cref="calcParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFactorToNum([NotNull] calcParser.FactorToNumContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>factorToNum</c>
	/// labeled alternative in <see cref="calcParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFactorToNum([NotNull] calcParser.FactorToNumContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>factorToParens</c>
	/// labeled alternative in <see cref="calcParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFactorToParens([NotNull] calcParser.FactorToParensContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>factorToParens</c>
	/// labeled alternative in <see cref="calcParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFactorToParens([NotNull] calcParser.FactorToParensContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="calcParser.parens"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParens([NotNull] calcParser.ParensContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="calcParser.parens"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParens([NotNull] calcParser.ParensContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
