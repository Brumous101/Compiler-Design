//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Brumo\Documents\repos\Compiler-Design\Labs\Lab3\Lab3\\calc.txt by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="calcParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public interface IcalcListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="calcParser.start"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStart([NotNull] calcParser.StartContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="calcParser.start"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStart([NotNull] calcParser.StartContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>sumPlusProduct</c>
	/// labeled alternative in <see cref="calcParser.sum"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSumPlusProduct([NotNull] calcParser.SumPlusProductContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>sumPlusProduct</c>
	/// labeled alternative in <see cref="calcParser.sum"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSumPlusProduct([NotNull] calcParser.SumPlusProductContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>sumToProduct</c>
	/// labeled alternative in <see cref="calcParser.sum"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSumToProduct([NotNull] calcParser.SumToProductContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>sumToProduct</c>
	/// labeled alternative in <see cref="calcParser.sum"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSumToProduct([NotNull] calcParser.SumToProductContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>productMultiplyNegate</c>
	/// labeled alternative in <see cref="calcParser.product"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProductMultiplyNegate([NotNull] calcParser.ProductMultiplyNegateContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>productMultiplyNegate</c>
	/// labeled alternative in <see cref="calcParser.product"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProductMultiplyNegate([NotNull] calcParser.ProductMultiplyNegateContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>productToNegate</c>
	/// labeled alternative in <see cref="calcParser.product"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProductToNegate([NotNull] calcParser.ProductToNegateContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>productToNegate</c>
	/// labeled alternative in <see cref="calcParser.product"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProductToNegate([NotNull] calcParser.ProductToNegateContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>addopNegate</c>
	/// labeled alternative in <see cref="calcParser.negate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAddopNegate([NotNull] calcParser.AddopNegateContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>addopNegate</c>
	/// labeled alternative in <see cref="calcParser.negate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAddopNegate([NotNull] calcParser.AddopNegateContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>negateToPower</c>
	/// labeled alternative in <see cref="calcParser.negate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNegateToPower([NotNull] calcParser.NegateToPowerContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>negateToPower</c>
	/// labeled alternative in <see cref="calcParser.negate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNegateToPower([NotNull] calcParser.NegateToPowerContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>factorPowopNegate</c>
	/// labeled alternative in <see cref="calcParser.power"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFactorPowopNegate([NotNull] calcParser.FactorPowopNegateContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>factorPowopNegate</c>
	/// labeled alternative in <see cref="calcParser.power"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFactorPowopNegate([NotNull] calcParser.FactorPowopNegateContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>powerToFactor</c>
	/// labeled alternative in <see cref="calcParser.power"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPowerToFactor([NotNull] calcParser.PowerToFactorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>powerToFactor</c>
	/// labeled alternative in <see cref="calcParser.power"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPowerToFactor([NotNull] calcParser.PowerToFactorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>factorToNum</c>
	/// labeled alternative in <see cref="calcParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFactorToNum([NotNull] calcParser.FactorToNumContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>factorToNum</c>
	/// labeled alternative in <see cref="calcParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFactorToNum([NotNull] calcParser.FactorToNumContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>factorToParens</c>
	/// labeled alternative in <see cref="calcParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFactorToParens([NotNull] calcParser.FactorToParensContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>factorToParens</c>
	/// labeled alternative in <see cref="calcParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFactorToParens([NotNull] calcParser.FactorToParensContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="calcParser.parens"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParens([NotNull] calcParser.ParensContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="calcParser.parens"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParens([NotNull] calcParser.ParensContext context);
}
