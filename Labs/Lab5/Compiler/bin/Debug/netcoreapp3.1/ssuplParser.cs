//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Brumo\Documents\repos\Compiler-Design\Labs\Lab5\Compiler\bin\debug\netcoreapp3.1\ssupl.txt by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class ssuplParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SEMI=1, WHILE=2, LP=3, RP=4, IF=5, ELSE=6, RETURN=7, LBR=8, RBR=9, NUM=10, 
		OR=11, AND=12, NOT=13, RELOP=14, PLUS=15, MULOP=16, MINUS=17;
	public const int
		RULE_start = 0, RULE_program = 1, RULE_braceblock = 2, RULE_stmts = 3, 
		RULE_stmt = 4, RULE_cond = 5, RULE_returnStmt = 6, RULE_loop = 7, RULE_expr = 8, 
		RULE_orexp = 9, RULE_andexp = 10, RULE_notexp = 11, RULE_rel = 12, RULE_sum = 13, 
		RULE_term = 14, RULE_neg = 15, RULE_factor = 16;
	public static readonly string[] ruleNames = {
		"start", "program", "braceblock", "stmts", "stmt", "cond", "returnStmt", 
		"loop", "expr", "orexp", "andexp", "notexp", "rel", "sum", "term", "neg", 
		"factor"
	};

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "SEMI", "WHILE", "LP", "RP", "IF", "ELSE", "RETURN", "LBR", "RBR", 
		"NUM", "OR", "AND", "NOT", "RELOP", "PLUS", "MULOP", "MINUS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ssupl.txt"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ssuplParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ssuplParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ssuplParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProgramContext program() {
			return GetRuleContext<ProgramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ssuplParser.Eof, 0); }
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			program();
			State = 35;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BraceblockContext braceblock() {
			return GetRuleContext<BraceblockContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 2, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			braceblock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BraceblockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBR() { return GetToken(ssuplParser.LBR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBR() { return GetToken(ssuplParser.RBR, 0); }
		public BraceblockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_braceblock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.EnterBraceblock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.ExitBraceblock(this);
		}
	}

	[RuleVersion(0)]
	public BraceblockContext braceblock() {
		BraceblockContext _localctx = new BraceblockContext(Context, State);
		EnterRule(_localctx, 4, RULE_braceblock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			Match(LBR);
			State = 40;
			stmts();
			State = 41;
			Match(RBR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		public StmtsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmts; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.EnterStmts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.ExitStmts(this);
		}
	}

	[RuleVersion(0)]
	public StmtsContext stmts() {
		StmtsContext _localctx = new StmtsContext(Context, State);
		EnterRule(_localctx, 6, RULE_stmts);
		try {
			State = 47;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHILE:
			case IF:
			case RETURN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 43;
				stmt();
				State = 44;
				stmts();
				}
				break;
			case RBR:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CondContext cond() {
			return GetRuleContext<CondContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(ssuplParser.SEMI, 0); }
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.EnterStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.ExitStmt(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_stmt);
		try {
			State = 54;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 49;
				cond();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 50;
				loop();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 51;
				returnStmt();
				State = 52;
				Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondContext : ParserRuleContext {
		public CondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cond; } }
	 
		public CondContext() { }
		public virtual void CopyFrom(CondContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CondElseContext : CondContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(ssuplParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(ssuplParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(ssuplParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BraceblockContext[] braceblock() {
			return GetRuleContexts<BraceblockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BraceblockContext braceblock(int i) {
			return GetRuleContext<BraceblockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(ssuplParser.ELSE, 0); }
		public CondElseContext(CondContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.EnterCondElse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.ExitCondElse(this);
		}
	}
	public partial class CondNoElseContext : CondContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(ssuplParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(ssuplParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(ssuplParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BraceblockContext braceblock() {
			return GetRuleContext<BraceblockContext>(0);
		}
		public CondNoElseContext(CondContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.EnterCondNoElse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.ExitCondNoElse(this);
		}
	}

	[RuleVersion(0)]
	public CondContext cond() {
		CondContext _localctx = new CondContext(Context, State);
		EnterRule(_localctx, 10, RULE_cond);
		try {
			State = 70;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				_localctx = new CondNoElseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 56;
				Match(IF);
				State = 57;
				Match(LP);
				State = 58;
				expr();
				State = 59;
				Match(RP);
				State = 60;
				braceblock();
				}
				break;
			case 2:
				_localctx = new CondElseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 62;
				Match(IF);
				State = 63;
				Match(LP);
				State = 64;
				expr();
				State = 65;
				Match(RP);
				State = 66;
				braceblock();
				State = 67;
				Match(ELSE);
				State = 68;
				braceblock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(ssuplParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(Context, State);
		EnterRule(_localctx, 12, RULE_returnStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			Match(RETURN);
			State = 73;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(ssuplParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(ssuplParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(ssuplParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BraceblockContext braceblock() {
			return GetRuleContext<BraceblockContext>(0);
		}
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.EnterLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.ExitLoop(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(Context, State);
		EnterRule(_localctx, 14, RULE_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			Match(WHILE);
			State = 76;
			Match(LP);
			State = 77;
			expr();
			State = 78;
			Match(RP);
			State = 79;
			braceblock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OrexpContext orexp() {
			return GetRuleContext<OrexpContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 16, RULE_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			orexp(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrexpContext : ParserRuleContext {
		public OrexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orexp; } }
	 
		public OrexpContext() { }
		public virtual void CopyFrom(OrexpContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Orexp1Context : OrexpContext {
		[System.Diagnostics.DebuggerNonUserCode] public OrexpContext orexp() {
			return GetRuleContext<OrexpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(ssuplParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AndexpContext andexp() {
			return GetRuleContext<AndexpContext>(0);
		}
		public Orexp1Context(OrexpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.EnterOrexp1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.ExitOrexp1(this);
		}
	}
	public partial class Orexp2Context : OrexpContext {
		[System.Diagnostics.DebuggerNonUserCode] public AndexpContext andexp() {
			return GetRuleContext<AndexpContext>(0);
		}
		public Orexp2Context(OrexpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.EnterOrexp2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.ExitOrexp2(this);
		}
	}

	[RuleVersion(0)]
	public OrexpContext orexp() {
		return orexp(0);
	}

	private OrexpContext orexp(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		OrexpContext _localctx = new OrexpContext(Context, _parentState);
		OrexpContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_orexp, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new Orexp2Context(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 84;
			andexp(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 91;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Orexp1Context(new OrexpContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_orexp);
					State = 86;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 87;
					Match(OR);
					State = 88;
					andexp(0);
					}
					} 
				}
				State = 93;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AndexpContext : ParserRuleContext {
		public AndexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andexp; } }
	 
		public AndexpContext() { }
		public virtual void CopyFrom(AndexpContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Andexp1Context : AndexpContext {
		[System.Diagnostics.DebuggerNonUserCode] public AndexpContext andexp() {
			return GetRuleContext<AndexpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(ssuplParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NotexpContext notexp() {
			return GetRuleContext<NotexpContext>(0);
		}
		public Andexp1Context(AndexpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.EnterAndexp1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.ExitAndexp1(this);
		}
	}
	public partial class Andexp2Context : AndexpContext {
		[System.Diagnostics.DebuggerNonUserCode] public NotexpContext notexp() {
			return GetRuleContext<NotexpContext>(0);
		}
		public Andexp2Context(AndexpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.EnterAndexp2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.ExitAndexp2(this);
		}
	}

	[RuleVersion(0)]
	public AndexpContext andexp() {
		return andexp(0);
	}

	private AndexpContext andexp(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AndexpContext _localctx = new AndexpContext(Context, _parentState);
		AndexpContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_andexp, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new Andexp2Context(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 95;
			notexp();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 102;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Andexp1Context(new AndexpContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_andexp);
					State = 97;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 98;
					Match(AND);
					State = 99;
					notexp();
					}
					} 
				}
				State = 104;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NotexpContext : ParserRuleContext {
		public NotexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notexp; } }
	 
		public NotexpContext() { }
		public virtual void CopyFrom(NotexpContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Notexp2Context : NotexpContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelContext rel() {
			return GetRuleContext<RelContext>(0);
		}
		public Notexp2Context(NotexpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.EnterNotexp2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.ExitNotexp2(this);
		}
	}
	public partial class Notexp1Context : NotexpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(ssuplParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NotexpContext notexp() {
			return GetRuleContext<NotexpContext>(0);
		}
		public Notexp1Context(NotexpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.EnterNotexp1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.ExitNotexp1(this);
		}
	}

	[RuleVersion(0)]
	public NotexpContext notexp() {
		NotexpContext _localctx = new NotexpContext(Context, State);
		EnterRule(_localctx, 22, RULE_notexp);
		try {
			State = 108;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOT:
				_localctx = new Notexp1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 105;
				Match(NOT);
				State = 106;
				notexp();
				}
				break;
			case LP:
			case NUM:
			case MINUS:
				_localctx = new Notexp2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 107;
				rel();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelContext : ParserRuleContext {
		public RelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rel; } }
	 
		public RelContext() { }
		public virtual void CopyFrom(RelContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Rel2Context : RelContext {
		[System.Diagnostics.DebuggerNonUserCode] public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		public Rel2Context(RelContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.EnterRel2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.ExitRel2(this);
		}
	}
	public partial class Rel1Context : RelContext {
		[System.Diagnostics.DebuggerNonUserCode] public SumContext[] sum() {
			return GetRuleContexts<SumContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SumContext sum(int i) {
			return GetRuleContext<SumContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELOP() { return GetToken(ssuplParser.RELOP, 0); }
		public Rel1Context(RelContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.EnterRel1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.ExitRel1(this);
		}
	}

	[RuleVersion(0)]
	public RelContext rel() {
		RelContext _localctx = new RelContext(Context, State);
		EnterRule(_localctx, 24, RULE_rel);
		try {
			State = 115;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				_localctx = new Rel1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 110;
				sum(0);
				State = 111;
				Match(RELOP);
				State = 112;
				sum(0);
				}
				break;
			case 2:
				_localctx = new Rel2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 114;
				sum(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SumContext : ParserRuleContext {
		public SumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sum; } }
	 
		public SumContext() { }
		public virtual void CopyFrom(SumContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Sum1Context : SumContext {
		[System.Diagnostics.DebuggerNonUserCode] public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(ssuplParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public Sum1Context(SumContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.EnterSum1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.ExitSum1(this);
		}
	}
	public partial class Sum2Context : SumContext {
		[System.Diagnostics.DebuggerNonUserCode] public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ssuplParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public Sum2Context(SumContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.EnterSum2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.ExitSum2(this);
		}
	}
	public partial class Sum3Context : SumContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public Sum3Context(SumContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.EnterSum3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.ExitSum3(this);
		}
	}

	[RuleVersion(0)]
	public SumContext sum() {
		return sum(0);
	}

	private SumContext sum(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SumContext _localctx = new SumContext(Context, _parentState);
		SumContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_sum, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new Sum3Context(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 118;
			term(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 128;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 126;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
					case 1:
						{
						_localctx = new Sum1Context(new SumContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_sum);
						State = 120;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 121;
						Match(PLUS);
						State = 122;
						term(0);
						}
						break;
					case 2:
						{
						_localctx = new Sum2Context(new SumContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_sum);
						State = 123;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 124;
						Match(MINUS);
						State = 125;
						term(0);
						}
						break;
					}
					} 
				}
				State = 130;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	 
		public TermContext() { }
		public virtual void CopyFrom(TermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Term2Context : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public NegContext neg() {
			return GetRuleContext<NegContext>(0);
		}
		public Term2Context(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.EnterTerm2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.ExitTerm2(this);
		}
	}
	public partial class Term1Context : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULOP() { return GetToken(ssuplParser.MULOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NegContext neg() {
			return GetRuleContext<NegContext>(0);
		}
		public Term1Context(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.EnterTerm1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.ExitTerm1(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		return term(0);
	}

	private TermContext term(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TermContext _localctx = new TermContext(Context, _parentState);
		TermContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_term, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new Term2Context(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 132;
			neg();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 139;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Term1Context(new TermContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_term);
					State = 134;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 135;
					Match(MULOP);
					State = 136;
					neg();
					}
					} 
				}
				State = 141;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NegContext : ParserRuleContext {
		public NegContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_neg; } }
	 
		public NegContext() { }
		public virtual void CopyFrom(NegContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Neg2Context : NegContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public Neg2Context(NegContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.EnterNeg2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.ExitNeg2(this);
		}
	}
	public partial class Neg1Context : NegContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ssuplParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NegContext neg() {
			return GetRuleContext<NegContext>(0);
		}
		public Neg1Context(NegContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.EnterNeg1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.ExitNeg1(this);
		}
	}

	[RuleVersion(0)]
	public NegContext neg() {
		NegContext _localctx = new NegContext(Context, State);
		EnterRule(_localctx, 30, RULE_neg);
		try {
			State = 145;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MINUS:
				_localctx = new Neg1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 142;
				Match(MINUS);
				State = 143;
				neg();
				}
				break;
			case LP:
			case NUM:
				_localctx = new Neg2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 144;
				factor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
	 
		public FactorContext() { }
		public virtual void CopyFrom(FactorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Factor2Context : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(ssuplParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(ssuplParser.RP, 0); }
		public Factor2Context(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.EnterFactor2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.ExitFactor2(this);
		}
	}
	public partial class Factor1Context : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(ssuplParser.NUM, 0); }
		public Factor1Context(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.EnterFactor1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IssuplListener typedListener = listener as IssuplListener;
			if (typedListener != null) typedListener.ExitFactor1(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 32, RULE_factor);
		try {
			State = 152;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUM:
				_localctx = new Factor1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 147;
				Match(NUM);
				}
				break;
			case LP:
				_localctx = new Factor2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 148;
				Match(LP);
				State = 149;
				expr();
				State = 150;
				Match(RP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 9: return orexp_sempred((OrexpContext)_localctx, predIndex);
		case 10: return andexp_sempred((AndexpContext)_localctx, predIndex);
		case 13: return sum_sempred((SumContext)_localctx, predIndex);
		case 14: return term_sempred((TermContext)_localctx, predIndex);
		}
		return true;
	}
	private bool orexp_sempred(OrexpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool andexp_sempred(AndexpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 2);
		}
		return true;
	}
	private bool sum_sempred(SumContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		}
		return true;
	}
	private bool term_sempred(TermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x13', '\x9D', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x5', '\x5', '\x32', '\n', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 
		'\x39', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 
		'I', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\a', '\v', '\\', '\n', '\v', '\f', '\v', '\xE', '\v', 
		'_', '\v', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\a', '\f', 'g', '\n', '\f', '\f', '\f', '\xE', '\f', 
		'j', '\v', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', 'o', 
		'\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x5', '\xE', 'v', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\a', '\xF', '\x81', '\n', '\xF', '\f', '\xF', '\xE', 
		'\xF', '\x84', '\v', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\x8C', '\n', 
		'\x10', '\f', '\x10', '\xE', '\x10', '\x8F', '\v', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x94', '\n', '\x11', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', 
		'\x12', '\x9B', '\n', '\x12', '\x3', '\x12', '\x2', '\x6', '\x14', '\x16', 
		'\x1C', '\x1E', '\x13', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', 
		'\x2', '\x2', '\x2', '\x98', '\x2', '$', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\'', '\x3', '\x2', '\x2', '\x2', '\x6', ')', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\x31', '\x3', '\x2', '\x2', '\x2', '\n', '\x38', '\x3', '\x2', 
		'\x2', '\x2', '\f', 'H', '\x3', '\x2', '\x2', '\x2', '\xE', 'J', '\x3', 
		'\x2', '\x2', '\x2', '\x10', 'M', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'S', '\x3', '\x2', '\x2', '\x2', '\x14', 'U', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '`', '\x3', '\x2', '\x2', '\x2', '\x18', 'n', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', 'u', '\x3', '\x2', '\x2', '\x2', '\x1C', 'w', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\x85', '\x3', '\x2', '\x2', '\x2', ' ', '\x93', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\x9A', '\x3', '\x2', '\x2', '\x2', 
		'$', '%', '\x5', '\x4', '\x3', '\x2', '%', '&', '\a', '\x2', '\x2', '\x3', 
		'&', '\x3', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\x5', '\x6', '\x4', 
		'\x2', '(', '\x5', '\x3', '\x2', '\x2', '\x2', ')', '*', '\a', '\n', '\x2', 
		'\x2', '*', '+', '\x5', '\b', '\x5', '\x2', '+', ',', '\a', '\v', '\x2', 
		'\x2', ',', '\a', '\x3', '\x2', '\x2', '\x2', '-', '.', '\x5', '\n', '\x6', 
		'\x2', '.', '/', '\x5', '\b', '\x5', '\x2', '/', '\x32', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x32', '\x3', '\x2', '\x2', '\x2', '\x31', '-', 
		'\x3', '\x2', '\x2', '\x2', '\x31', '\x30', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\t', '\x3', '\x2', '\x2', '\x2', '\x33', '\x39', '\x5', '\f', 
		'\a', '\x2', '\x34', '\x39', '\x5', '\x10', '\t', '\x2', '\x35', '\x36', 
		'\x5', '\xE', '\b', '\x2', '\x36', '\x37', '\a', '\x3', '\x2', '\x2', 
		'\x37', '\x39', '\x3', '\x2', '\x2', '\x2', '\x38', '\x33', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x34', '\x3', '\x2', '\x2', '\x2', '\x38', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x39', '\v', '\x3', '\x2', '\x2', '\x2', 
		':', ';', '\a', '\a', '\x2', '\x2', ';', '<', '\a', '\x5', '\x2', '\x2', 
		'<', '=', '\x5', '\x12', '\n', '\x2', '=', '>', '\a', '\x6', '\x2', '\x2', 
		'>', '?', '\x5', '\x6', '\x4', '\x2', '?', 'I', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x41', '\a', '\a', '\x2', '\x2', '\x41', '\x42', '\a', '\x5', '\x2', 
		'\x2', '\x42', '\x43', '\x5', '\x12', '\n', '\x2', '\x43', '\x44', '\a', 
		'\x6', '\x2', '\x2', '\x44', '\x45', '\x5', '\x6', '\x4', '\x2', '\x45', 
		'\x46', '\a', '\b', '\x2', '\x2', '\x46', 'G', '\x5', '\x6', '\x4', '\x2', 
		'G', 'I', '\x3', '\x2', '\x2', '\x2', 'H', ':', '\x3', '\x2', '\x2', '\x2', 
		'H', '@', '\x3', '\x2', '\x2', '\x2', 'I', '\r', '\x3', '\x2', '\x2', 
		'\x2', 'J', 'K', '\a', '\t', '\x2', '\x2', 'K', 'L', '\x5', '\x12', '\n', 
		'\x2', 'L', '\xF', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\a', '\x4', 
		'\x2', '\x2', 'N', 'O', '\a', '\x5', '\x2', '\x2', 'O', 'P', '\x5', '\x12', 
		'\n', '\x2', 'P', 'Q', '\a', '\x6', '\x2', '\x2', 'Q', 'R', '\x5', '\x6', 
		'\x4', '\x2', 'R', '\x11', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\x5', 
		'\x14', '\v', '\x2', 'T', '\x13', '\x3', '\x2', '\x2', '\x2', 'U', 'V', 
		'\b', '\v', '\x1', '\x2', 'V', 'W', '\x5', '\x16', '\f', '\x2', 'W', ']', 
		'\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\f', '\x4', '\x2', '\x2', 'Y', 
		'Z', '\a', '\r', '\x2', '\x2', 'Z', '\\', '\x5', '\x16', '\f', '\x2', 
		'[', 'X', '\x3', '\x2', '\x2', '\x2', '\\', '_', '\x3', '\x2', '\x2', 
		'\x2', ']', '[', '\x3', '\x2', '\x2', '\x2', ']', '^', '\x3', '\x2', '\x2', 
		'\x2', '^', '\x15', '\x3', '\x2', '\x2', '\x2', '_', ']', '\x3', '\x2', 
		'\x2', '\x2', '`', '\x61', '\b', '\f', '\x1', '\x2', '\x61', '\x62', '\x5', 
		'\x18', '\r', '\x2', '\x62', 'h', '\x3', '\x2', '\x2', '\x2', '\x63', 
		'\x64', '\f', '\x4', '\x2', '\x2', '\x64', '\x65', '\a', '\xE', '\x2', 
		'\x2', '\x65', 'g', '\x5', '\x18', '\r', '\x2', '\x66', '\x63', '\x3', 
		'\x2', '\x2', '\x2', 'g', 'j', '\x3', '\x2', '\x2', '\x2', 'h', '\x66', 
		'\x3', '\x2', '\x2', '\x2', 'h', 'i', '\x3', '\x2', '\x2', '\x2', 'i', 
		'\x17', '\x3', '\x2', '\x2', '\x2', 'j', 'h', '\x3', '\x2', '\x2', '\x2', 
		'k', 'l', '\a', '\xF', '\x2', '\x2', 'l', 'o', '\x5', '\x18', '\r', '\x2', 
		'm', 'o', '\x5', '\x1A', '\xE', '\x2', 'n', 'k', '\x3', '\x2', '\x2', 
		'\x2', 'n', 'm', '\x3', '\x2', '\x2', '\x2', 'o', '\x19', '\x3', '\x2', 
		'\x2', '\x2', 'p', 'q', '\x5', '\x1C', '\xF', '\x2', 'q', 'r', '\a', '\x10', 
		'\x2', '\x2', 'r', 's', '\x5', '\x1C', '\xF', '\x2', 's', 'v', '\x3', 
		'\x2', '\x2', '\x2', 't', 'v', '\x5', '\x1C', '\xF', '\x2', 'u', 'p', 
		'\x3', '\x2', '\x2', '\x2', 'u', 't', '\x3', '\x2', '\x2', '\x2', 'v', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', 'w', 'x', '\b', '\xF', '\x1', '\x2', 
		'x', 'y', '\x5', '\x1E', '\x10', '\x2', 'y', '\x82', '\x3', '\x2', '\x2', 
		'\x2', 'z', '{', '\f', '\x5', '\x2', '\x2', '{', '|', '\a', '\x11', '\x2', 
		'\x2', '|', '\x81', '\x5', '\x1E', '\x10', '\x2', '}', '~', '\f', '\x4', 
		'\x2', '\x2', '~', '\x7F', '\a', '\x13', '\x2', '\x2', '\x7F', '\x81', 
		'\x5', '\x1E', '\x10', '\x2', '\x80', 'z', '\x3', '\x2', '\x2', '\x2', 
		'\x80', '}', '\x3', '\x2', '\x2', '\x2', '\x81', '\x84', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x80', '\x3', '\x2', '\x2', '\x2', '\x82', '\x83', 
		'\x3', '\x2', '\x2', '\x2', '\x83', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\x84', '\x82', '\x3', '\x2', '\x2', '\x2', '\x85', '\x86', '\b', '\x10', 
		'\x1', '\x2', '\x86', '\x87', '\x5', ' ', '\x11', '\x2', '\x87', '\x8D', 
		'\x3', '\x2', '\x2', '\x2', '\x88', '\x89', '\f', '\x4', '\x2', '\x2', 
		'\x89', '\x8A', '\a', '\x12', '\x2', '\x2', '\x8A', '\x8C', '\x5', ' ', 
		'\x11', '\x2', '\x8B', '\x88', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8F', 
		'\x3', '\x2', '\x2', '\x2', '\x8D', '\x8B', '\x3', '\x2', '\x2', '\x2', 
		'\x8D', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '\x8F', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x90', '\x91', 
		'\a', '\x13', '\x2', '\x2', '\x91', '\x94', '\x5', ' ', '\x11', '\x2', 
		'\x92', '\x94', '\x5', '\"', '\x12', '\x2', '\x93', '\x90', '\x3', '\x2', 
		'\x2', '\x2', '\x93', '\x92', '\x3', '\x2', '\x2', '\x2', '\x94', '!', 
		'\x3', '\x2', '\x2', '\x2', '\x95', '\x9B', '\a', '\f', '\x2', '\x2', 
		'\x96', '\x97', '\a', '\x5', '\x2', '\x2', '\x97', '\x98', '\x5', '\x12', 
		'\n', '\x2', '\x98', '\x99', '\a', '\x6', '\x2', '\x2', '\x99', '\x9B', 
		'\x3', '\x2', '\x2', '\x2', '\x9A', '\x95', '\x3', '\x2', '\x2', '\x2', 
		'\x9A', '\x96', '\x3', '\x2', '\x2', '\x2', '\x9B', '#', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '\x31', '\x38', 'H', ']', 'h', 'n', 'u', '\x80', 
		'\x82', '\x8D', '\x93', '\x9A',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
